name: Gradle

on:
  push:
    branches: [ v1.* ]
  pull_request:
    branches: [ v1.* ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Validate gradle wrapper
      uses: gradle/wrapper-validation-action@v1
    - name: Set up JDK 16
      uses: actions/setup-java@v1
      with:
        java-version: 16

    - name: Restore caches
      uses: actions/cache@v2
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/build.gradle', '**/*.gradle*', 'gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-${{ hashFiles('**/build.gradle', '**/*.gradle*' ,'gradle-wrapper.properties') }}
          ${{ runner.os }}-gradle-

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: ./gradlew build
    - name: Run unit tests
      run: ./gradlew test

  publish:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/v1.') && github.event.pull_request.merged == true && github.repository == 'MockBukkit/MockBukkit'

    steps:
      - uses: actions/checkout@v2
      - uses: actions-ecosystem/action-release-label@v1
        id: release-label
        with:
          label_prefix: release/
      - uses: actions-ecosystem/action-get-latest-tag@v1
        id: get-latest-tag
        if: ${{ steps.release-label.outputs.level != null }}
        with:
          semver_only: true
      - uses: actions-ecosystem/action-bump-semver@v1
        id: bump-semver
        if: ${{ steps.release-label.outputs.level != null }}
        with:
          current_version: ${{ steps.get-latest-tag.outputs.tag }}
          level: ${{ steps.release-label.outputs.level }}

      - name: Set up JDK 16
        if: ${{ steps.bump-semver.outputs.new_version != null }}
        uses: actions/setup-java@v1
        with:
          java-version: 16

      - name: Restore caches
        if: ${{ steps.bump-semver.outputs.new_version != null }}
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/build.gradle', '**/*.gradle*', 'gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-${{ hashFiles('**/build.gradle', '**/*.gradle*' ,'gradle-wrapper.properties') }}
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        if: ${{ steps.bump-semver.outputs.new_version != null }}
        run: chmod +x gradlew
      - name: Build with Gradle
        if: ${{ steps.bump-semver.outputs.new_version != null }}
        run: ./gradlew build
      - name: Run unit tests
        if: ${{ steps.bump-semver.outputs.new_version != null }}
        run: ./gradlew test

      - name: Store Private key
        if: ${{ steps.bump-semver.outputs.new_version != null }}
        uses: DamianReeves/write-file-action@v1.0
        with:
          path: private.key
          contents: ${{ secrets.PRIV_KEY }}
          write-mode: overwrite
      - name: Publish
        if: ${{ steps.bump-semver.outputs.new_version != null }}
        env:
          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
          SIGN_KEY: ${{ secrets.PRIV_KEY_PASS }}
        run: |
          mkdir -p $HOME/.gnupg
          echo use-agent >> $HOME/.gnupg/gpg.conf
          echo pinentry-mode loopback >> $HOME/.gnupg/gpg.conf
          echo allow-loopback-pinentry >> $HOME/.gnupg/gpg-agent.conf
          gpg --batch --import private.key
          gpg --batch --export-secret-keys --passphrase $SIGN_KEY "Sebastiaan de Schaetzen <sebastiaan.de.schaetzen@gmail.com>" > private.gpg
          
          NEW_VERSION=$(echo ${GITHUB_REF#refs/heads/})-$(echo ${{ steps.bump-semver.outputs.new_version }} | sed -e 's/^v//')
          
          ./gradlew publishMockBukkitPublicationToRepositoryRepository \
            -Pmockbukkit.version=$NEW_VERSION \
            -PossrhUsername=seeseemelk \
            -PossrhPassword=$OSSRH_PASSWORD \
            -Psigning.secretKeyRingFile=private.gpg \
            -Psigning.keyId=${{ secrets.PRIV_KEY_ID }} \
            -Psigning.password=$SIGN_KEY
      - name: Push tag
        uses: actions-ecosystem/action-push-tag@v1
        if: ${{ steps.bump-semver.outputs.new_version != null }}
        with:
          tag: ${{ steps.bump-semver.outputs.new_version }}
          message: '${{ steps.bump-semver.outputs.new_version }}: PR #${{ github.event.pull_request.number }} ${{ github.event.pull_request.title }}'
